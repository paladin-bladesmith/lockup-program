//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! <https://github.com/kinobi-so/kinobi>

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
pub struct Withdraw {
    pub depositor_token_account: solana_program::pubkey::Pubkey,

    pub lockup_account: solana_program::pubkey::Pubkey,

    pub escrow_account: solana_program::pubkey::Pubkey,

    pub escrow_token_account: solana_program::pubkey::Pubkey,

    pub token_mint: solana_program::pubkey::Pubkey,

    pub token_program: solana_program::pubkey::Pubkey,
}

impl Withdraw {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(6 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.depositor_token_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.lockup_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.escrow_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.escrow_token_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = WithdrawInstructionData::new().try_to_vec().unwrap();

        solana_program::instruction::Instruction {
            program_id: crate::PALADIN_LOCKUP_PROGRAM_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct WithdrawInstructionData {
    discriminator: u8,
}

impl WithdrawInstructionData {
    pub fn new() -> Self {
        Self { discriminator: 2 }
    }
}

impl Default for WithdrawInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

/// Instruction builder for `Withdraw`.
///
/// ### Accounts:
///
///   0. `[writable]` depositor_token_account
///   1. `[writable]` lockup_account
///   2. `[]` escrow_account
///   3. `[writable]` escrow_token_account
///   4. `[]` token_mint
///   5. `[optional]` token_program (default to
///      `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
#[derive(Clone, Debug, Default)]
pub struct WithdrawBuilder {
    depositor_token_account: Option<solana_program::pubkey::Pubkey>,
    lockup_account: Option<solana_program::pubkey::Pubkey>,
    escrow_account: Option<solana_program::pubkey::Pubkey>,
    escrow_token_account: Option<solana_program::pubkey::Pubkey>,
    token_mint: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl WithdrawBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn depositor_token_account(
        &mut self,
        depositor_token_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.depositor_token_account = Some(depositor_token_account);
        self
    }
    #[inline(always)]
    pub fn lockup_account(&mut self, lockup_account: solana_program::pubkey::Pubkey) -> &mut Self {
        self.lockup_account = Some(lockup_account);
        self
    }
    #[inline(always)]
    pub fn escrow_account(&mut self, escrow_account: solana_program::pubkey::Pubkey) -> &mut Self {
        self.escrow_account = Some(escrow_account);
        self
    }
    #[inline(always)]
    pub fn escrow_token_account(
        &mut self,
        escrow_token_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.escrow_token_account = Some(escrow_token_account);
        self
    }
    #[inline(always)]
    pub fn token_mint(&mut self, token_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_mint = Some(token_mint);
        self
    }
    /// `[optional account, default to
    /// 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = Withdraw {
            depositor_token_account: self
                .depositor_token_account
                .expect("depositor_token_account is not set"),
            lockup_account: self.lockup_account.expect("lockup_account is not set"),
            escrow_account: self.escrow_account.expect("escrow_account is not set"),
            escrow_token_account: self
                .escrow_token_account
                .expect("escrow_token_account is not set"),
            token_mint: self.token_mint.expect("token_mint is not set"),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `withdraw` CPI accounts.
pub struct WithdrawCpiAccounts<'a, 'b> {
    pub depositor_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub lockup_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub escrow_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub escrow_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `withdraw` CPI instruction.
pub struct WithdrawCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub depositor_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub lockup_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub escrow_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub escrow_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
}

impl<'a, 'b> WithdrawCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: WithdrawCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            depositor_token_account: accounts.depositor_token_account,
            lockup_account: accounts.lockup_account,
            escrow_account: accounts.escrow_account,
            escrow_token_account: accounts.escrow_token_account,
            token_mint: accounts.token_mint,
            token_program: accounts.token_program,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(6 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.depositor_token_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.lockup_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.escrow_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.escrow_token_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = WithdrawInstructionData::new().try_to_vec().unwrap();

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::PALADIN_LOCKUP_PROGRAM_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(6 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.depositor_token_account.clone());
        account_infos.push(self.lockup_account.clone());
        account_infos.push(self.escrow_account.clone());
        account_infos.push(self.escrow_token_account.clone());
        account_infos.push(self.token_mint.clone());
        account_infos.push(self.token_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `Withdraw` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` depositor_token_account
///   1. `[writable]` lockup_account
///   2. `[]` escrow_account
///   3. `[writable]` escrow_token_account
///   4. `[]` token_mint
///   5. `[]` token_program
#[derive(Clone, Debug)]
pub struct WithdrawCpiBuilder<'a, 'b> {
    instruction: Box<WithdrawCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> WithdrawCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(WithdrawCpiBuilderInstruction {
            __program: program,
            depositor_token_account: None,
            lockup_account: None,
            escrow_account: None,
            escrow_token_account: None,
            token_mint: None,
            token_program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn depositor_token_account(
        &mut self,
        depositor_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.depositor_token_account = Some(depositor_token_account);
        self
    }
    #[inline(always)]
    pub fn lockup_account(
        &mut self,
        lockup_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.lockup_account = Some(lockup_account);
        self
    }
    #[inline(always)]
    pub fn escrow_account(
        &mut self,
        escrow_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.escrow_account = Some(escrow_account);
        self
    }
    #[inline(always)]
    pub fn escrow_token_account(
        &mut self,
        escrow_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.escrow_token_account = Some(escrow_token_account);
        self
    }
    #[inline(always)]
    pub fn token_mint(
        &mut self,
        token_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_mint = Some(token_mint);
        self
    }
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool`
    /// indicating whether the account is writable or not, and a `bool`
    /// indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let instruction = WithdrawCpi {
            __program: self.instruction.__program,

            depositor_token_account: self
                .instruction
                .depositor_token_account
                .expect("depositor_token_account is not set"),

            lockup_account: self
                .instruction
                .lockup_account
                .expect("lockup_account is not set"),

            escrow_account: self
                .instruction
                .escrow_account
                .expect("escrow_account is not set"),

            escrow_token_account: self
                .instruction
                .escrow_token_account
                .expect("escrow_token_account is not set"),

            token_mint: self.instruction.token_mint.expect("token_mint is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct WithdrawCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    depositor_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    lockup_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    escrow_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    escrow_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
