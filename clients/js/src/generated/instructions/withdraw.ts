/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type WritableAccount,
} from '@solana/web3.js';
import { PALADIN_LOCKUP_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export type WithdrawInstruction<
  TProgram extends string = typeof PALADIN_LOCKUP_PROGRAM_PROGRAM_ADDRESS,
  TAccountDepositorTokenAccount extends string | IAccountMeta<string> = string,
  TAccountLockupAccount extends string | IAccountMeta<string> = string,
  TAccountEscrowAccount extends string | IAccountMeta<string> = string,
  TAccountEscrowTokenAccount extends string | IAccountMeta<string> = string,
  TAccountTokenMint extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountDepositorTokenAccount extends string
        ? WritableAccount<TAccountDepositorTokenAccount>
        : TAccountDepositorTokenAccount,
      TAccountLockupAccount extends string
        ? WritableAccount<TAccountLockupAccount>
        : TAccountLockupAccount,
      TAccountEscrowAccount extends string
        ? ReadonlyAccount<TAccountEscrowAccount>
        : TAccountEscrowAccount,
      TAccountEscrowTokenAccount extends string
        ? WritableAccount<TAccountEscrowTokenAccount>
        : TAccountEscrowTokenAccount,
      TAccountTokenMint extends string
        ? ReadonlyAccount<TAccountTokenMint>
        : TAccountTokenMint,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type WithdrawInstructionData = { discriminator: number };

export type WithdrawInstructionDataArgs = {};

export function getWithdrawInstructionDataEncoder(): Encoder<WithdrawInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({ ...value, discriminator: 2 })
  );
}

export function getWithdrawInstructionDataDecoder(): Decoder<WithdrawInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getWithdrawInstructionDataCodec(): Codec<
  WithdrawInstructionDataArgs,
  WithdrawInstructionData
> {
  return combineCodec(
    getWithdrawInstructionDataEncoder(),
    getWithdrawInstructionDataDecoder()
  );
}

export type WithdrawInput<
  TAccountDepositorTokenAccount extends string = string,
  TAccountLockupAccount extends string = string,
  TAccountEscrowAccount extends string = string,
  TAccountEscrowTokenAccount extends string = string,
  TAccountTokenMint extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  depositorTokenAccount: Address<TAccountDepositorTokenAccount>;
  lockupAccount: Address<TAccountLockupAccount>;
  escrowAccount: Address<TAccountEscrowAccount>;
  escrowTokenAccount: Address<TAccountEscrowTokenAccount>;
  tokenMint: Address<TAccountTokenMint>;
  tokenProgram?: Address<TAccountTokenProgram>;
};

export function getWithdrawInstruction<
  TAccountDepositorTokenAccount extends string,
  TAccountLockupAccount extends string,
  TAccountEscrowAccount extends string,
  TAccountEscrowTokenAccount extends string,
  TAccountTokenMint extends string,
  TAccountTokenProgram extends string,
>(
  input: WithdrawInput<
    TAccountDepositorTokenAccount,
    TAccountLockupAccount,
    TAccountEscrowAccount,
    TAccountEscrowTokenAccount,
    TAccountTokenMint,
    TAccountTokenProgram
  >
): WithdrawInstruction<
  typeof PALADIN_LOCKUP_PROGRAM_PROGRAM_ADDRESS,
  TAccountDepositorTokenAccount,
  TAccountLockupAccount,
  TAccountEscrowAccount,
  TAccountEscrowTokenAccount,
  TAccountTokenMint,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = PALADIN_LOCKUP_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    depositorTokenAccount: {
      value: input.depositorTokenAccount ?? null,
      isWritable: true,
    },
    lockupAccount: { value: input.lockupAccount ?? null, isWritable: true },
    escrowAccount: { value: input.escrowAccount ?? null, isWritable: false },
    escrowTokenAccount: {
      value: input.escrowTokenAccount ?? null,
      isWritable: true,
    },
    tokenMint: { value: input.tokenMint ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.depositorTokenAccount),
      getAccountMeta(accounts.lockupAccount),
      getAccountMeta(accounts.escrowAccount),
      getAccountMeta(accounts.escrowTokenAccount),
      getAccountMeta(accounts.tokenMint),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getWithdrawInstructionDataEncoder().encode({}),
  } as WithdrawInstruction<
    typeof PALADIN_LOCKUP_PROGRAM_PROGRAM_ADDRESS,
    TAccountDepositorTokenAccount,
    TAccountLockupAccount,
    TAccountEscrowAccount,
    TAccountEscrowTokenAccount,
    TAccountTokenMint,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedWithdrawInstruction<
  TProgram extends string = typeof PALADIN_LOCKUP_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    depositorTokenAccount: TAccountMetas[0];
    lockupAccount: TAccountMetas[1];
    escrowAccount: TAccountMetas[2];
    escrowTokenAccount: TAccountMetas[3];
    tokenMint: TAccountMetas[4];
    tokenProgram: TAccountMetas[5];
  };
  data: WithdrawInstructionData;
};

export function parseWithdrawInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedWithdrawInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      depositorTokenAccount: getNextAccount(),
      lockupAccount: getNextAccount(),
      escrowAccount: getNextAccount(),
      escrowTokenAccount: getNextAccount(),
      tokenMint: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getWithdrawInstructionDataDecoder().decode(instruction.data),
  };
}
