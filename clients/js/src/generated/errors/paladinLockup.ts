/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/web3.js';
import { PALADIN_LOCKUP_PROGRAM_ADDRESS } from '../programs';

/** IncorrectMint: Incorrect mint. */
export const PALADIN_LOCKUP_ERROR__INCORRECT_MINT = 0x0; // 0
/** IncorrectEscrowAuthorityAddress: Incorrect escrow authority address. */
export const PALADIN_LOCKUP_ERROR__INCORRECT_ESCROW_AUTHORITY_ADDRESS = 0x1; // 1
/** IncorrectEscrowTokenAccount: Incorrect escrow token account. */
export const PALADIN_LOCKUP_ERROR__INCORRECT_ESCROW_TOKEN_ACCOUNT = 0x2; // 2
/** LockupActive: Lockup is still active. */
export const PALADIN_LOCKUP_ERROR__LOCKUP_ACTIVE = 0x3; // 3
/** LockupAlreadyUnlocked: Lockup already unlocked. */
export const PALADIN_LOCKUP_ERROR__LOCKUP_ALREADY_UNLOCKED = 0x4; // 4

export type PaladinLockupError =
  | typeof PALADIN_LOCKUP_ERROR__INCORRECT_ESCROW_AUTHORITY_ADDRESS
  | typeof PALADIN_LOCKUP_ERROR__INCORRECT_ESCROW_TOKEN_ACCOUNT
  | typeof PALADIN_LOCKUP_ERROR__INCORRECT_MINT
  | typeof PALADIN_LOCKUP_ERROR__LOCKUP_ACTIVE
  | typeof PALADIN_LOCKUP_ERROR__LOCKUP_ALREADY_UNLOCKED;

let paladinLockupErrorMessages: Record<PaladinLockupError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  paladinLockupErrorMessages = {
    [PALADIN_LOCKUP_ERROR__INCORRECT_ESCROW_AUTHORITY_ADDRESS]: `Incorrect escrow authority address.`,
    [PALADIN_LOCKUP_ERROR__INCORRECT_ESCROW_TOKEN_ACCOUNT]: `Incorrect escrow token account.`,
    [PALADIN_LOCKUP_ERROR__INCORRECT_MINT]: `Incorrect mint.`,
    [PALADIN_LOCKUP_ERROR__LOCKUP_ACTIVE]: `Lockup is still active.`,
    [PALADIN_LOCKUP_ERROR__LOCKUP_ALREADY_UNLOCKED]: `Lockup already unlocked.`,
  };
}

export function getPaladinLockupErrorMessage(code: PaladinLockupError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (paladinLockupErrorMessages as Record<PaladinLockupError, string>)[
      code
    ];
  }

  return 'Error message not available in production bundles.';
}

export function isPaladinLockupError<
  TProgramErrorCode extends PaladinLockupError,
>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    PALADIN_LOCKUP_PROGRAM_ADDRESS,
    code
  );
}
