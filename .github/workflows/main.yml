name: Main

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: 18
  SOLANA_VERSION: 1.18.12

jobs:
  format_and_lint:
    name: Format & Lint
    runs-on: ubuntu-latest
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: ./.github/actions/setup
        with:
          clippy: true
          node: ${{ env.NODE_VERSION }}
          rustfmt: true
          protoc: true

      - name: Format Programs
        run: pnpm programs:format -- --check
      
      - name: Format Client Rust
        run: pnpm clients:rust:format -- --check
      
      - name: Format Client JS
        run: pnpm clients:js:format

      - name: Lint Programs
        run: pnpm programs:lint -Zunstable-options --features bpf-entrypoint,test-sbf -- --deny=warnings --deny=clippy::arithmetic_side_effects
      
      - name: Lint Client Rust
        run: pnpm clients:rust:lint -Zunstable-options -- --deny=warnings
      
      - name: Lint Client JS
        run: pnpm clients:js:lint

  build_programs:
    name: Build programs
    runs-on: ubuntu-latest
    needs: format_and_lint
    steps:
      - name: Git checkout
        uses: actions/checkout@v4

      - name: Setup environment
        uses: ./.github/actions/setup
        with:
          cargo-cache-key: cargo-programs
          protoc: true
          node: ${{ env.NODE_VERSION }}
          solana: ${{ env.SOLANA_VERSION }}

      - name: Build programs
        run: pnpm programs:build --features bpf-entrypoint

      - name: Upload program builds
        uses: actions/upload-artifact@v4
        with:
          name: program-builds
          path: ./target/deploy/*.so
          if-no-files-found: error

      - name: Save all builds for clients
        uses: actions/cache/save@v4
        with:
          path: ./**/*.so
          key: ${{ runner.os }}-builds-${{ github.sha }}
  
  test_programs:
    name: Test Programs
    runs-on: ubuntu-latest
    needs: format_and_lint
    steps:
      - name: Git checkout
        uses: actions/checkout@v4

      - name: Setup environment
        uses: ./.github/actions/setup
        with:
          cargo-cache-key: cargo-programs
          protoc: true
          node: ${{ env.NODE_VERSION }}
          solana: ${{ env.SOLANA_VERSION }}

      - name: Test Programs
        run: pnpm programs:test --features bpf-entrypoint
  
  generate_idls:
    name: Check IDL generation
    runs-on: ubuntu-latest
    needs: format_and_lint
    steps:
      - name: Git checkout
        uses: actions/checkout@v4

      - name: Setup environment
        uses: ./.github/actions/setup
        with:
          cargo-cache-key: cargo-programs
          node: ${{ env.NODE_VERSION }}

      - name: Generate IDLs
        run: pnpm generate:idls

      - name: Ensure working directory is clean
        run: |
          git status --porcelain
          test -z "$(git status --porcelain)"
  
  generate_clients:
    name: Check client generation
    runs-on: ubuntu-latest
    needs: format_and_lint
    steps:
      - name: Git checkout
        uses: actions/checkout@v4

      - name: Setup environment
        uses: ./.github/actions/setup
        with:
          node: ${{ env.NODE_VERSION }}
          rustfmt: true

      - name: Generate clients
        run: pnpm generate:clients

      - name: Ensure working directory is clean
        run: |
          git status --porcelain
          test -z "$(git status --porcelain)"
  
  test_client_rust:
    name: Test Client Rust
    runs-on: ubuntu-latest
    needs: build_programs
    steps:
      - name: Git checkout
        uses: actions/checkout@v4

      - name: Setup environment
        uses: ./.github/actions/setup
        with:
          cargo-cache-key: cargo-programs
          protoc: true
          node: ${{ env.NODE_VERSION }}
          solana: ${{ env.SOLANA_VERSION }}

      - name: Test Client Rust
        run: pnpm clients:rust:test
  
  test_client_js:
    name: Test Client JS
    runs-on: ubuntu-latest
    needs: build_programs
    steps:
      - name: Git checkout
        uses: actions/checkout@v4

      - name: Setup environment
        uses: ./.github/actions/setup
        with:
          cargo-cache-key: cargo-programs
          protoc: true
          node: ${{ env.NODE_VERSION }}
          solana: ${{ env.SOLANA_VERSION }}

      - name: Test Client JS
        run: pnpm clients:js:test
